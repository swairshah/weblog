#!/bin/bash

# BashBlogger 
# Copyright 2013,2014 Swair Shah <swairshah@gmail.com>

################################################################################
#
# LICENSE
#
################################################################################

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

################################################################################
#
# ACKNOWLEDGEMENTS
#
################################################################################

# Highly copied from Bashdown by Brian Buccola.
#

################################################################################
#
# DECLARATIONS
#
################################################################################

# Program information, primarily for usage()
program_name="BashBlogger"
program_description="A Bash program for blogging in Markdown."

# Blog information, displayed on all html webpages
blog_title="A Blog!"              # blog title, shown on every page
#blog_subtitle="logic, language, linux"  # blog subtitle, shown on every page
blog_index_title="Posts"           # title of the main index page
return_to_index="Archives"         # text for returning to index

# Blog metadata, used inside html <head>
blog_author="Swair Shah"
blog_description="Swair's Blog"
blog_keywords="Swair Shah, Math, Computers, Chess, Music"

# License to display in footer
blog_license='<a rel="license" target="_blank"
href="http://creativecommons.org/licenses/by/3.0/">
<img alt="Creative Commons License" style="border-width:0"
src="http://i.creativecommons.org/l/by/3.0/80x15.png" /></a>'

# Syntax highlighting style. Possible values are: pygments, kate, monochrome,
# espresso, zenburn, haddock, and tango.
highlight_style="pygments"

# Favicon filename (the file should be inside ${blog_root_dir})
# favicon="favicon.png"
favicon=""

# Date format to be displayed in html files
date_format="%B %d, %Y"

# Google Analytics ID (e.g. UA-XXXXXXXX-X)
google_analytics="UA-42812812-1"

# Blog directory structure, all relative to ${blog_root_dir}
blog_root_dir="${HOME}/weblog"    # where the blog program lives
index_file="index.html"         # main index html file listing all posts
mkd_dir="source"                # directory for markdown posts
html_dir="blog"                 # directory for html posts
draft_dir="drafts"              # directory for drafts
about="about.html"              # html file describing the blog
style="style.css"               # CSS stylesheet

# remote 
remote_server='192.241.254.198'
remote_user='swair'

# Include files. Updated automatically.
head="head.html"                # html inserted between <head></head>
before_body="before-body.html"  # html inserted before <body>
after_body="after-body.html"    # html inserted after </body>

# Color handling when running running program in terminal
red="$(tput setaf 1)"           # red
green="$(tput setaf 2)"         # green
yellow="$(tput setaf 3)"        # yellow
blue="$(tput setaf 4)"          # blue
magenta="$(tput setaf 5)"       # magenta
cyan="$(tput setaf 6)"          # cyan
white="$(tput setaf 7)"         # white/gray
black="$(tput setaf 8)"         # black
bold="$(tput bold)"             # bold
reset="$(tput sgr0)"            # reset colors

use_color="true"                # whether the program should output color
                                # possible values: "true" and "false"

# Colors, e.g. error_color="${bold}${red}"
list_color="${bold}${yellow}"   # color to use when listing posts
info_color="${green}"           # color to use for info output
warn_color="${bold}${yellow}"   # color to use for `Warning:'
confirm_color="${bold}"         # color to use for confirmation messages
error_color="${bold}${red}"     # color to use for `Error:'

################################################################################
#
# FUNCTIONS
#
################################################################################

# Convert a string to use as filename of a post.
# Usage: convert_string [STRING]
convert_string() {
    echo "$1" | tr [:upper:] [:lower:] | sed 's/\ /-/g' | tr -dc '[:alnum:]-'
}

# Ask for confirmation; return 0 if y(es), else 1.
# Usage: confirm [MESSAGE]
confirm() {
    local -l reply # convert to lowercase
    local msg="$1"
    if [[ "${use_color}" = true ]]; then
        read -p "${confirm_color}${msg} [Y/n] ${reset}" reply
    else
        read -p "${msg} [Y/n] " reply
    fi
    [[ -z "${reply}" || "${reply}" = y?(es) ]]
}

# Create html that gets inserted before <body> on each page.
# Usage: create_before_body
create_before_body() {
    echo "<!-- Warning: Do not edit this file; it will be overwritten during blog rebuild. -->" > "${before_body}"
    echo '<h1 class="blog_title">'"${blog_title}"'</h1>' >> "${before_body}"
    if [[ -n "${blog_subtitle}" ]]; then
        echo '<h4 class="blog_subtitle">'"${blog_subtitle}"'</h4>' >> "${before_body}"
    fi
}

# Create html that get inserted after </body> on each page.
# Usage: create_after_body
create_after_body() {
#    echo "<div id=\"disqus_thread\"></div>
#    <script type=\"text/javascript\">
#        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
#        var disqus_shortname = 'swairshahcom'; // required: replace example with your forum shortname
#
#        /* * * DON'T EDIT BELOW THIS LINE * * */
#        (function() {
#            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
#            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
#            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
#        })();
#    </script>
#    <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>
#    <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>" > "${after_body}"
#    
    echo "<!-- Warning!: Do not edit this file; it will be overwritten during blog rebuild. -->" >> "${after_body}"
    echo '<hr class="footer"/>' >> "${after_body}"
    echo '<p class="footer">' >> "${after_body}"
    #echo "${blog_license}<br>" >> "${after_body}"
    echo "Copyright &#169; 2012-$(date +"%Y") &ndash; ${blog_author}<br>" >> "${after_body}"
    echo '</p>' >> "${after_body}"
}

# Create html that goes inside <head></head>.
# Usage: create_head
create_head() {
    echo "<!-- Warning: Do not edit this file; it will be overwritten during blog rebuild. -->" > "${head}"
    echo '<meta name="description" content="'"${blog_description}"'">' >> "${head}"
    echo '<meta name="keywords" content="'"${blog_keywords}"'">' >> "${head}"
    echo '<link rel="icon" href="/'"${favicon}"'">' >> "${head}" # Using `/' here means favicon won't show up locally (on preview)
    echo '<link href="http://fonts.googleapis.com/css?family=PT+Serif:400,700,400italic" rel="stylesheet" type="text/css">' >> "${head}"
    echo '<link href="http://fonts.googleapis.com/css?family=PT+Sans:400,700,400italic" rel="stylesheet" type="text/css">' >> "${head}"
    echo '<link href="http://fonts.googleapis.com/css?family=PT+Mono:400,700,400italic" rel="stylesheet" type="text/css">' >> "${head}"
    echo '<link href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono" rel="stylesheet" type="text/css">' >> "${head}"
    echo '<link href="http://fonts.googleapis.com/css?family=Alegreya:400italic,700italic,400,700|Alegreya+SC:400,700|PT+Mono" rel="stylesheet" type="text/css">' >> "${head}"

    if [[ -n "${google_analytics}" ]]; then
        echo "
<script type=\"text/javascript\">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', '"${google_analytics}"']);
    _gaq.push(['_trackPageview']);

    (function() {
     var ga = document.createElement('script');
     ga.type = 'text/javascript';
     ga.async = true;
     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
     var s = document.getElementsByTagName('script')[0];
     s.parentNode.insertBefore(ga, s);
     })();
</script>" >> "${head}"
    fi
}

deploy_site() {
    rsync -avc ${HOME}/weblog $remote_user@$remote_server:/var/www/html
}
# Print error message and exit 1.
# Usage: die [MESSAGE] [...]
die() {
    if [[ "${use_color}" = true ]]; then
        printf "${error_color}%s:${reset}" "Error"
        printf " %s\n" "$@"
    else
        printf "%s:" "Error"
        printf " %s\n" "$@"
    fi
    exit 1
}

# Edit a post.
# Usage: edit_post [FILENAME]
edit_post() {
    # Strip .markdown extension and get basename.
    local basename="$(basename "$1" .markdown)"
    if [[ ! -f "${mkd_dir}/${basename}.markdown" && ! -f "${draft_dir}/${basename}.markdown" ]]; then
        die "Cannot find $1 (or illegal file extension)."
    fi

    # If editing a draft, temporarily move it to $mkd_dir.
    if [[ -f "${draft_dir}/${basename}.markdown" ]]; then
        mv "${draft_dir}/${basename}.markdown" "${mkd_dir}/${basename}.markdown"
    fi

    local post_status="E"
    until [[ "${post_status}" = P || "${post_status}" = p ]]; do
        # Case 1: Save as draft.
        if [[ "${post_status}" = D || "${post_status}" = d ]]; then
            mkdir -p "${draft_dir}"
            # Remove corresponding html file.
            if ! rm "${html_dir}/${basename}.html"; then
                warn "Could not remove \`${html_dir}/${basename}.html'."
            else
                info "Removed \`${html_dir}/${basename}.html'."
            fi
            # Move markdown file to ${draft_dir}.
            if ! mv "${mkd_dir}/${basename}.markdown" "${draft_dir}/${basename}.markdown"; then
                die "Could not move \`${mkd_dir}/${basename}.markdown' to \`${draft_dir}'."
            else
                info "Saved draft as \`${draft_dir}/${basename}.markdown'."
            fi
            rebuild_index
            exit 0
        fi

        # Case 2: Remove post.
        if [[ "${post_status}" = R || "${post_status}" = r ]]; then
            remove_post "${mkd_dir}/${basename}.markdown"
            exit 0
        fi

        # Case 3 (default): Edit post.
        info "Editing post..."
        ${EDITOR:-vi} "${mkd_dir}/${basename}.markdown"

        mkd2html_post "${mkd_dir}/${basename}.markdown" # mkd2html_post updates ${basename} if necessary
        info "Preview this post at: file://${blog_root_dir}/${html_dir}/${basename}.html."
        if [[ "${use_color}" = true ]]; then
            read -p "${confirm_color}[P]ost entry, [e]dit again, save as [d]raft, or [r]emove entry? [p/E/d/r] ${reset}" post_status
        else
            read -p "[P]ost entry, [e]dit again, save as [d]raft, or [r]emove entry? [p/E/d/r] " post_status
        fi
    done

    # Case 4: Post entry.
    info "Entry posted."
    rebuild_index
}

# Parse markdown file for title.
# Usage: get_title [FILENAME]
get_title() {
    awk '/<!-- begin metadata/, /end metadata -->/' "$1" | grep "^title" | sed 's/^title:\ *//'
}

# Parse markdown file for date (without time).
# Usage: get_date [FILENAME]
get_date() {
    awk '/<!-- begin metadata/, /end metadata -->/' "$1" | grep "^date" | awk '{ print $2 }'
}

# Print info message.
# Usage: info [MESSAGE] [...]
info() {
    if [[ "${use_color}" = true ]]; then
        printf "${info_color}%s\n${reset}" "$@"
    else
        printf "%s\n" "$@"
    fi
}

# List all posts in a pretty table, including formatted dates.
# Usage: list_posts
list_posts() {
    lines="\n"
    n=1
    for f in $(ls ${mkd_dir}/*.markdown | sort -r); do
        title="$(get_title "$f")"
        date="$(get_date "$f")"
        date="$(prettify_date "${date}")"
        line="$n ^ ${title} ^ ${date}"
        # Append ${line} to end of ${lines}
        lines="${lines}${line}\n"
        n=$(( $n + 1 ))
    done
    if [[ "${use_color}" = true ]]; then
        printf "${list_color}${lines}${reset}" | column -t -s "^"
    else
        printf "${lines}" | column -t -s "^"
    fi
}

# Convert *all* markdown posts to html.
# Usage: mkd2html_all_posts
mkd2html_all_posts() {
    info ":: Reconverting all markdown files in \`${mkd_dir}'..."
    rm "${html_dir}/*.html" &> /dev/null

    # Check for markdown files.
    ls ${mkd_dir}/*.markdown &> /dev/null
    if [[ $? -ne 0 ]]; then
        warn "Could not find any markdown files."
        return
    fi

    for f in $(ls ${mkd_dir}/*.markdown); do
        mkd2html_post "$f"
    done
}

# Convert markdown index (output of `rebuild_index') to html.
# Usage: mkd2html_index [FILENAME]
mkd2html_index() {
    info "Converting $1 to html..."
    if [[ ! -f "${head}" ]]; then
        die "Could not find \`${head}'. Try running \`$0 setup'."
    fi

    local index_title="$(get_title "$1")"
    local date="$(get_date "$1")"
    if [[ -z "${index_title}" || -z "${date}" ]]; then
        die "Corrupt or missing metadata."
    fi

    # Create temporary html file with index title, to be added during conversion.
    local tmp_before_body="tmp-before-body.html"
    echo "" >> "${tmp_before_body}"
    echo '<h2 class="post_title">'"${index_title}"'</h2>' >> "${tmp_before_body}"
    echo "" >> "${tmp_before_body}"

    pandoc -s -S --mathjax --highlight-style "${highlight_style}" -c "${style}" \
        -H "${head}" -B "${before_body}" -B "${tmp_before_body}" -A "${about}" -A "${after_body}" \
        -V pagetitle="${blog_title}" -V author-meta="${blog_author}" \
        -f markdown -t html5 -o "${index_file}" "$1"

    rm "${tmp_before_body}"
}

# Convert markdown post to html with Pandoc.
# Global variables defined: ${basename}, ${mkd_file}, and ${html_file}
# Usage: mkd2html_post [FILENAME]
mkd2html_post() {
    info "Converting \`$1' to html..."
    # Strip .markdown extension and get basename
    local basename_old="$(basename "$1" .markdown)"
    if [[ ! -f "${mkd_dir}/${basename_old}.markdown" ]]; then
        die "Could not find \`$1' in \`${mkd_dir}'."
    fi

    # Parse file for title and date.
    local post_title="$(get_title "$1")"
    local date="$(get_date "$1")"
    if [[ -z "${post_title}" || -z "${date}" ]]; then
        die "Corrupt or missing metadata."
    fi

    # Check if title or date metadata conflicts with filename.
    local basename_new="$(convert_string "${date}-${post_title}")"
    if [[ "${basename_old}" != "${basename_new}" ]] && confirm "Change in title/date detected. Overwrite old filename(s)?"; then
        cp "${mkd_dir}/${basename_old}.markdown" "${mkd_dir}/${basename_new}.markdown"
        info "Updated markdown filename."
        # Check if corresponding html file exists, and remove it.
        if [[ -f "${html_dir}/${basename_old}.html" ]]; then
            rm "${html_dir}/${basename_old}.html"
            info "Removed old html file \`${html_dir}/${basename_old}.html'."
        fi
        # Keep track so that the old markdown can be removed later.
        local remove_old_mkd_file="true"
        basename="${basename_new}"
    elif [[ "${basename_old}" != "${basename_new}" ]]; then
        # Skip updating filename.
        basename="${basename_old}"
    else
        basename="${basename_new}"
    fi

    # Create temporary html file with post title, etc., to be added during conversion.
    local tmp_before_body="tmp-before-body.html"
    echo "" >> "${tmp_before_body}"
    echo '<a class="return_to_index" href="../'"${index_file}"'">'"${return_to_index}"'</a>' >> "${tmp_before_body}"
    echo '<h2 class="post_title">'"${post_title}"'</h2>' >> "${tmp_before_body}"
    echo '<p class="date">'"$(prettify_date "${date}")"'</p>' >> "${tmp_before_body}"
    echo "" >> "${tmp_before_body}"

    # Declare some global variables to use outside of this function.
    mkd_file="${mkd_dir}/${basename}.markdown"
    html_file="${html_dir}/${basename}.html"

    # NB: The reference to ${style} must be one level up, since the html file
    # generated here lives below ${blog_root_dir}, in ${html_dir.}
    pandoc -s -S --mathjax --highlight-style "${highlight_style}" -c "../${style}" \
        -H "${head}" -B "${before_body}" -B "${tmp_before_body}" -A "${after_body}" \
        -V pagetitle="${post_title} - ${blog_title}" -V author-meta="${blog_author}" \
        -f markdown -t html5 -o "${html_file}" "${mkd_file}"

    rm "${tmp_before_body}"

    if [[ "${remove_old_mkd_file}" = true ]]; then
        # Note that "$1" = "${mkd_dir}/${basename_old}.markdown"
        rm "$1"
        info "Removed old markdown file \`${1}'."
    fi
}

# Create new post, automatically adding metadata.
# Usage: new_post
new_post() {
    if [[ "${use_color}" = true ]]; then
        read -p "${confirm_color}Title: ${reset}" title
    else
        read -p "Title: " title
    fi
    local tmp="${mkd_dir}/$(date +"%Y-%m-%d")-$(convert_string "${title}").markdown"
    if [[ -f "${tmp}" ]]; then
        die "The file \`${tmp}' already exists."
    fi

    # Add post title and date as comment metadata,
    # to be parsed by get_title and get_date.
    echo "<!-- begin metadata" >> "${tmp}"
    echo "title: ${title}" >> "${tmp}"
    echo "date: $(date +"%Y-%m-%d %H:%M")" >> "${tmp}"
    echo "end metadata -->" >> "${tmp}"

    edit_post "${tmp}"
}

# Convert a timestamp into user-specified date format, for display in html files.
# Usage: prettify_date [DATE]
prettify_date() {
    date -d "$1" +"${date_format}"
}

# Rebuild the index (main) page, i.e. update list of posts and links.
# Usage: rebuild_index
rebuild_index() {
    info ":: Rebuilding index..."
    local index_mkd_file="$(basename "${index_file}" .html).markdown"
    # Note: overwrites any previous index_mkd_file.
    echo "<!-- begin metadata" > "${index_mkd_file}"
    echo "title: ${blog_index_title}" >> "${index_mkd_file}"
    echo "date: $(date +"%Y-%m-%d %H:%M")" >> "${index_mkd_file}"
    echo "end metadata -->" >> "${index_mkd_file}"
    echo "" >> "${index_mkd_file}"

    # Test that there are markdown files.
    ls ${mkd_dir}/*.markdown &> /dev/null
    if [[ $? -ne 0 ]]; then
        warn "Could not find any markdown files. Building empty index."
    fi

    for f in $(ls ${mkd_dir}/*.markdown 2> /dev/null | sort -r); do
        local title="$(get_title "$f")"
        local date="$(get_date "$f")"
        local date="$(prettify_date "${date}")"
        echo "- [${title}](${html_dir}/$(basename "$f" .markdown).html) <span class=\"date\">-- ${date}</span>" >> "${index_mkd_file}"
    done

    mkd2html_index "${index_mkd_file}"
    rm "${index_mkd_file}"
    info "Done rebuilding index. View it at: file://${blog_root_dir}/${index_file}."
}

# Recreate include files, reconvert all markdown posts to html, then rebuild the index.
# Usage: rebuild_all
rebuild_all() {
    setup
    mkd2html_all_posts
    rebuild_index
}

# Safely remove a markdown post by also removing its corresponding html file
# and then rebuilding the index.
# Usage: remove_post [FILENAME]
remove_post() {
    local basename="$(basename "$1" .markdown)"
    if [[ ! -f "${mkd_dir}/${basename}.markdown" && ! -f "${draft_dir}/${basename}.markdown" ]]; then
        die "Cannot find \`${basename}' in \`${mkd_dir}/' or \`${draft_dir}/'."
    fi

    if confirm "Remove \`${1}'?"; then
        if ! rm "$1"; then
            die "Problem removing \`$1'."
        else
            info "Done."
        fi

        if [[ -f "${html_dir}/${basename}.html" ]]; then
            info "Removing \`${html_dir}/${basename}.html'..."
            if ! rm "${html_dir}/${basename}.html"; then
                "Problem removing \`$1'."
            else
                info "Done."
            fi
        else
            info "No html file to remove."
        fi

        rebuild_index
    else
        info "Aborted."
    fi
}

# Remove all markdown and html files and start from scratch.
# Usage: reset
reset() {
    warn "This will remove ALL markdown and html files."
    if confirm "Continue?"; then
        rm "${head}" &>/dev/null
        rm "${before_body}" &>/dev/null
        rm "${after_body}" &>/dev/null
        rm "${index_file}" &>/dev/null
        rm "${mkd_dir}" -rf &>/dev/null
        rm "${html_dir}" -rf &>/dev/null
        rm "${draft_dir}" -rf &>/dev/null
        info "Reset done."
    else
        info "Aborted."
    fi
}

# Create include files (head, before_body, after_body) as well as an about page.
# Usage: setup
setup() {
    touch "${about}"
    create_head
    create_before_body
    create_after_body
    info "Created \`${head}', \`${before_body}', and \`${after_body}'."
}

# Print program usage.
# Usage: usage
usage() {
    cat <<EOF
${program_name} v${program_version}. ${program_description}
Usage: $(basename "$0") [COMMAND] [[PARAMETERS]]

Commands:
new                 Create a new post.
list                List all published posts in reverse chronological order.
edit [filename]     Edit a published post or draft.
remove [filename]   Safely remove a published post or draft.
convert [filename]  Convert a single markdown post to html.
setup               Create necessary include files. Run this before doing anything.
deploy              Deploy blog to remote server
rebuild             Rebuild all html files (posts, include files, and \`${index_file}').
reset               Remove all markdown and html files and start from scratch.
all                 Rebuild and Deploy
EOF
}

# Print warning.
# Usage: warn [MESSAGE] [...]
warn() {
    if [[ "${use_color}" = true ]]; then
        printf "${warn_color}%s:${reset}" "Warning"
        printf " %s\n" "$@"
    else
        printf "%s:" "Warning"
        printf " %s\n" "$@"
    fi
}

################################################################################
#
# MAIN BODY OF THE PROGRAM
#
################################################################################

# First cd into blog's root directory.
if ! cd "${blog_root_dir}"; then
    die "Could not cd into \`${blog_root_dir}'."
fi

# Check that the right number of parameters are given.
if (( $# == 0 || $# > 2 )); then usage && exit; fi

# Make markdown and html directories to reduce risk of errors.
mkdir -p "${mkd_dir}"
mkdir -p "${html_dir}"

case "$1" in
    new) new_post ;;
    deploy) deploy_site ;;
    ed|edit) edit_post "$2" ;;
    rm|remove) remove_post "$2" ;;
    cv|convert) mkd2html_post "$2" ;;
    ls|list) list_posts ;;
    rb|rebuild) rebuild_all ;;
    all) rebuild_all && deploy_site ;;
    setup) setup ;;
    reset) reset ;;
    *) usage && die "Invalid parameter(s)." ;;
esac

exit 0

# vim: set tw=0 sts=4 sw=4 et:
